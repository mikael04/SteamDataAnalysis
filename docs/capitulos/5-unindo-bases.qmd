---
params:
  overwrite_tables: "F"
  debug: "T"
---
```{r, header-unindo-bases, echo=FALSE, message=FALSE}
########################################################################################## #
#'  Parte do arquivo de análise exploratória
#'  Arquivo focado na união das duas bases utilizadas
#' 
#'  Autor: Mikael Marin Coletto
#'  Data: 12/03/23
########################################################################################## #

## 0.1 - Bibliotecas e scripts fontes----
library(jsonlite)
```

Como comentado das discrepâncias entre as bases de dados, eu considerei algumas faltas de avaliações/jogadores como inconsistentes na base 1, e assim decidi utilizar a base 3 com a adição dos jogos não presentes nela, que estão presentes na base 1.

```{r, joinDBs}

## Base 1
if(params$use_db == "T"){
  df_base_1_clean <- dplyr::tbl(steamdb, "db_base_1_clean") |> 
    dplyr::collect()
}else{
# db_base_1_clean <- data.table::fread(here::here("data-raw/created-tables/db-games-1.csv"))
}
## Base 3
if(params$use_db == "T"){
  df_base_3_clean <- dplyr::tbl(steamdb, "db_base_3_clean") |> 
    dplyr::collect() |> 
    dplyr::select(-tags)
}else{
  # db_base_3_clean <- data.table::fread(here::here("data-raw/created-tables/db-games-3.csv"))
}


## Jogos presentes na base 1 que não estão na base 3
df_antijoin_games <- dplyr::anti_join(df_base_1_clean, df_base_3_clean, by = "app_id") |> 
  dplyr::mutate(rating = 0, price_final = 0, price_original = 0, discount = 0, steam_deck = F, 
                db1 = T, release_date = as.character((lubridate::ymd(lubridate::mdy(release_date))))) |>
  dplyr::mutate(user_reviews = positive+negative) |>
  dplyr::select(app_id, title = name, date_release = release_date, win = windows, mac, linux, rating,
                positive_ratio = overall, user_reviews, price_final = price, price_original,
                discount, steam_deck, db1)

## Jogos da base 3
df_base_3_clean <- df_base_3_clean |> 
  dplyr::mutate(db1 = F, date_release = as.character(lubridate::ymd(date_release)))
# colnames(db_base_3_clean)
# colnames(df_antijoin_games)

## Unindo base 3 e jogos da base 1 não presentes na base 3
df_all_games <- rbind(df_base_3_clean, df_antijoin_games, fill = T) |> 
  dplyr::filter(app_id > 1) |> 
  dplyr::mutate(date_release = lubridate::ymd(date_release))
```

Também foi analisado novamente as duplicatas que foram geradas, e novamente foi decidido mantê-lás, já que representavam, ou jogos que possuíam o mesmo nome, mas são jogos diferentes, ou são diferentes versões dos jogos (versão normal e versão "game of the year" ou um relançamento por exemplo).

##### Adicionando informações

Agora adicionaremos à base agrupada os dados referentes às informações do jogo, inicialmente adicionando através de outro arquivo presente nos arquivos da base 3.

```{r, addingInfo}
run_join <- T
if(params$overwrite_tables == "T"){
  if(params$use_db == "T"){
    df_metadata <- dplyr::tbl(steamdb, "db_base_3_metadata") |> 
    dplyr::collect()
  
  }else{
    library(jsonlite)
    out <- lapply(readLines(here::here("data-raw/steam-data/db-3/games_metadata.json")), fromJSON)
  
    ## Unindo o terceiro elemento da lista
    for(i in 1:length(out)){
      purrr::pluck(out, i, 3)<-paste0(purrr::pluck(out, i, 3), collapse = ",")
    }
    ## Transformando em um dataframe para unir à outra base
    df_metadata <- do.call(rbind.data.frame, out)
  }
  
  ## Adicionando coluna de tags do df_metadata, e adicionando colunas de categoria, genero e tags extra do df anterior
  df_all_games <- dplyr::left_join(df_all_games, df_metadata, by = "app_id") |> 
    dplyr::select(-description) |> 
    dplyr::left_join(df_base_1_clean |> 
                       dplyr::select(app_id, categories, genres, tags) |> 
                       dplyr::rename(tags_extra = tags),
                     by = "app_id")
  
}else{
  
  if(params$use_db == "T"){
    df_all_games <- dplyr::tbl(steamdb, "db_all_games") |> 
      dplyr::collect()
  }else{
  df_all_games <- data.table::fread(here::here("data-raw/created-tables/db-reviews-join.csv")) |>
    dplyr::mutate(categories = ifelse(categories == "", NA, categories),
            genres = ifelse(genres == "", NA, genres),
                  tags = ifelse(tags == "", NA, tags),
                  tags_extra = ifelse(tags_extra == "", NA, tags_extra))
  }
}

```

```{r, escrevendo-tabela-db-all, echo=F, include = FALSE}
## Escrevendo nova base para não precisar rodar os joins e comparações todas as vezes
if(params$overwrite_tables == "T"){
  if(params$use_db == "T"){
    func_write_db(df_name = "db_reviews_join", df = df_all_games, con = steamdb, overwrite = T, 
                index_list = "", debug = params$debug)
  }else{
    if(!dir.exists("data-raw/created-tables/")){
      dir.create("data-raw/created-tables/")
    }
    data.table::fwrite(df_all_games, here::here("data-raw/created-tables/db-reviews-join.csv"))
  }
}
```
