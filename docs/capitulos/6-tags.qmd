---
params:
  overwrite_tables: "T"
---
```{r, header-tags, echo=FALSE, message=FALSE}
########################################################################################## #
#'  Parte do arquivo de análise exploratória
#'  Arquivo focado em analisar as variáveis de tags da base unida
#' 
#'  Autor: Mikael Marin Coletto
#'  Data: 12/03/23
########################################################################################## #

## 0.1 - Bibliotecas e scripts fontes----
library(purrr)
library(dplyr)
source(here::here("R/fct-auxiliares/fct_order_strings.R"))
source(here::here("R/fct-auxiliares/fct_ajustando_tags.R"))
source(here::here("R/fct-auxiliares/fct_filter_not_games.R"))
```

Como uni duas bases de dados, precisamos tratar e unificar a nossa coluna que será definida como classificadora dos jogos. A base 1 possuía dados nas colunas `genres`, `categories` e `tags`, já a base 3 apenas em `tags`.

A coluna que se adequava melhor aos objetivos no caso da base 1, era a variável `tags`, já que possuía mais classificações para os jogos que a variável `genres`, normalmente possuindo tudo que estava presente nela e mais algumas outras características. E a variável `Categories` estava mais associada ao modo de jogo e informações da Steam, como se possuía *Achievements*, conquistas nos jogos, se tinha suporte a controle pela Steam, etc.

Como alguns jogos estavam em ambas as bases de dados, por fim acabei ficando com duas colunas de classificação, e para não perder nenhuma classificação, achei interessante comparar as características e adicionar as faltantes, fazendo uma união de tudo que aparecia em ambas as variáveis.


##### Separação de tags

```{r, tags}
teste_interno <- T
if(teste_interno){
df_all_games <- data.table::fread(here::here("data-raw/created-tables/db-reviews-join.csv")) |> 
    dplyr::mutate(tags = ifelse(tags == "", NA, tags),
                  categories = ifelse(categories == "", NA, categories),
                  genres = ifelse(genres == "", NA, genres),
                  tags_extra = ifelse(tags_extra == "", NA, tags_extra))
}

## Verificando as diferenças entre tags de um df e do outro (tags e tags_extra)
df_tags <- dplyr::select(df_all_games, 
                         app_id, title, tags, tags_extra) |> 
  dplyr::filter(!is.na(tags) | !is.na(tags_extra))

df_tags_equal <- df_tags[tags == tags_extra,]
df_tags_not_equal <- df_tags[tags != tags_extra,]

## Primeiro check será em jogos que possuem números de tags diferentes
tags_dif_ids <- df_tags_not_equal |> 
  dplyr::select(app_id, tags, tags_extra) |> 
  dplyr::mutate(check_lenght = ifelse(stringr::str_length(tags) == stringr::str_length(tags_extra), T, F))

```

##### Analisando tags diferentes

Então, será criado uma nova coluna para as tags diferentes. É feita uma comparação, entre as duas colunas, e é mantido em um vetor o que temos de elementos iguais (`equal`), depois em outro vetor o que temos a mais em uma coluna (`diff1`) e no terceiro o que temos a mais na outra coluna (`diff2`).

Depois transformei novamente estes vetores em colunas para poder inspecionar como ficaram as novas colunas. E nesse momento verifiquei que por serem bases diferentes, em alguns casos existiam pequenas variações no nome da classificação, que foram ajustados para que não influênciassem na contagem final. Um exemplo destes casos era a categorização "Rogue like", que em uma base estava definida como "Rogue like" e na outra "Rogue-like", isso e mais algumas outras categorizações foram normalizadas.

```{r, tags-all}
### XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ####
### ALTERAR TAGS ALL, usar tidyr e dplyr (consultar fct_ajustando_tags)
### não é possível de forma tão simples, talvez usando trible? (lista dentro do df)
### Gerar uma lista com os elementos e fazer um "union" entre elas e um "intersect"
### XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ####

vector_tags <- df_tags_not_equal$tags |> 
  purrr::map(\(x) stringr::str_sort(stringr::str_split_1(x, pattern = ",")))

vector_tags_ex <- df_tags_not_equal$tags_extra |> 
  purrr::map(\(x) stringr::str_sort(stringr::str_split_1(x, pattern = ",")))

# vector_tags_aux <- vector_tags[1:5]
# vector_tags_ex_aux <- vector_tags_ex[1:5]

## Criando uma lista com todas as tags q estão presentes em uma coluna e não na outra 
## (estão em tags e não estão em tags_extra, estão em tags_extra e não estão em tags)
diff_elem <- NULL
for(i in 1:length(vector_tags)){
  elem_1 <- pluck(vector_tags, i)
  elem_2 <- pluck(vector_tags_ex, i)
  
  diff1 <- setdiff(elem_1, elem_2)
  diff2 <- setdiff(elem_2, elem_1)
  equal <- intersect(elem_1, elem_2)
  
  pluck(diff_elem, i, 1) <- paste0(equal, collapse = ",")
  pluck(diff_elem, i, 2) <- paste0("1 - ", paste0(diff1, collapse = ","), ". 2 - ", paste0(diff2, collapse = ","))
  pluck(diff_elem, i, 3) <- pluck(df_tags_not_equal, 1, i)
}

## Alterando para DF, para melhor visualização
df_diff <- data.frame(t(sapply(diff_elem, c)))
colnames(df_diff) <- c("equal", "diff", "id")

df_diff <- df_diff |> 
  tidyr::separate_wider_delim(diff, ". 2", names = c("first", "seccond")) |> 
  dplyr::mutate(seccond = paste0("2", seccond)) |> 
  dplyr::mutate(equal = as.character(equal),
                id = as.integer(id))

## Investigando tags com mesmo tamanho, buscando pequenas alterações na escrita
df_diff_ <- df_diff |> 
  dplyr::filter(!(first == "1 - ") & !(seccond == "2 - ")) |> 
  dplyr::filter(stringr::str_length(first) == stringr::str_length(seccond))

## Palavras com grafias levemente diferentes serão alteradas
## Roguelike e Roguelite para Rogue-like e Rogue-lite,
## Base Building para Base-Building
## e-sports para eSports
## Football (Soccer) para Soccer
## Football (American) para Football
## Puzzle Platformer para Puzzle-Platformer

df_diff <- func_ajustando_tags(df_diff, debug)


df_diff <- df_diff |> 
  dplyr::select(id, tags)
```

##### Tags NA

Após a separação e tratamento de ambas os conjuntos de dados, observei um número grande de dados que não havia sido incluído em nenhuma base, nem no que possuía as tags iguais nem nos que possuíam as tags diferentes. Descobri que isso foi causado pela forma como o `R` trata `NA`, as colunas que possuem `NA` não são comparadas diretamente, então elas ficaram excluídas da junção anterior. Portanto, tratei de forma que também adicionasse estes casos de forma simples, copiando os dados de uma coluna à outra, para tratar de forma similar à que seria tratado o conjunto de dados que possuía as colunas iguais.

```{r, tags-na}
## Como ainda possuíamos um número grande de NAs em uma das duas colunas, a solução foi copiar
## a coluna preenchida e tratar como se fosse uma junção que não precisaria de tratamento
## Tags e Tags_extra NA
df_tags_na_1 <- df_tags[is.na(tags)]
## Clonando a coluna de tags para que seja tratada da mesma forma para o df com tags iguais
df_tags_na_1$tags <- df_tags_na_1$tags_extra

df_tags_na_3 <- df_tags[is.na(tags_extra)]
## Clonando a coluna de tags para que seja tratada da mesma forma para o df com tags iguais
df_tags_na_3$tags_extra <- df_tags_na_3$tags

df_tags_equal <- rbind(df_tags_equal, df_tags_na_1, df_tags_na_3)
```

##### Visualzando tags mais frequentes

Após a organização e limpeza das tags, vou começar com uma visualização simples para identificar as tags mais utilizadas (e as menos utilizadas). Outro detalhe é que farei uma junção, agora da tabela com as tags diferentes e com as que defini como tags iguais.

```{r, count-tags}

df_tags_all <- df_tags_equal |> 
  dplyr::select(app_id, tags) |> 
  rbind(df_diff |> 
          dplyr::rename(app_id = id))

all_ordered <- df_tags_all$tags |> 
  purrr::map(\(x) stringr::str_sort(stringr::str_split_1(x, pattern = ",")))

## Colocando tudo numa única lista para contagem
all_string_listwise <- tolower(unlist(lapply(all_ordered, unique)))

## Fazendo a contagem e transformando em um dataframe, podemos verifiicar diretamente na tabela
df_tags_count <- as.data.frame(table(all_string_listwise), stringsAsFactors = F)
## Renomeando colunas
names(df_tags_count) <- c("tag", "count")

## Escrevendo base de dados
if(params$overwrite_tables == "T"){
  data.table::fwrite(df_tags_count, here::here("data-raw/created-tables/df-tags-count.csv"))
}

## Utilllizamos as 50 tags que mais aparecem e criamos uma nova tabela para visualização
df_tags_count |> 
  dplyr::arrange(desc(count)) |> 
  dplyr::slice_head(n = 10) |> 
  gt::gt()
```

##### Organizando nova tabela

E então, para finalizar a organização das tags, nós vamos excluir as características dos jogos que vieram de ambas as bases, e vamos adicionar essa nova coluna tratada.

```{r, df-allgames-newtags}
df_all_games_new_tags <- df_all_games |> 
  dplyr::select(-tags, -tags_extra) |> 
  dplyr::inner_join(df_tags_all, by = "app_id") |> 
  dplyr::rename(tags_all = tags)


## Escrevendo base de dados
if(params$overwrite_tables){
  data.table::fwrite(df_all_games_new_tags, here::here("data-raw/created-tables/db-all-games-tags-all.csv"))
}

```


##### Criando base no formato long

Para futuras comparações, decidi criar dois tipos de bases de dados, uma no formato long, com cada linha possuindo uma única tag, e outra com todas as tags agrupadas em uma única coluna, unida por vírgula.

```{r, both-bases}
## dataframe filtrando generos e tags que não são considerados jogos
df_all_games_split <- df_all_games_new_tags |> 
  dplyr::filter(title != "Houdini Indie") |> 
  tidyr::separate_longer_delim(tags_all, delim = ",") |>  
  dplyr::rowwise()

## Escrevendo base de dados
if(params$overwrite_tables){
  data.table::fwrite(df_all_games_split, here::here("data-raw/created-tables/db-all-games-tags-all-split.csv"))
}

df_all_games_filt <- df_all_games_split |> 
  dplyr::group_by(app_id) |> 
  dplyr::mutate(tags_all_ = paste0(tags_all, collapse = ",")) |> 
  dplyr::distinct(app_id, .keep_all = T) |> 
  dplyr::select(-tags_all) |> 
  dplyr::rename(tags_all = tags_all_) |> 
  dplyr::ungroup()

all.equal(df_all_games_new_tags, df_all_games_filt)
compare::compare(df_all_games_new_tags, df_all_games_filt, allowAll = T, equal = T)

```
